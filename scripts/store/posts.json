[{"title":"Building a Home","subtitle":"The how and why behind the Junior Dev site.","created":"2016-09-12T04:00:00.000Z","modified":null,"content":"<h2>Core Technologies</h2>\n<p>Junior Dev is built with HTML, CSS, and JavaScript. Or more specifically: HTML5, CSS3, and ES5.</p>\n<p>When deciding how to build the site, I chose these three languages because I wanted to demonstrate and improve my understanding of the fundamentals of web development. I chose to avoid third-party code as much as possible in favor of writing my own, in order to best demonstrate my ability to potential employers. The only third-party code that directly influences the distribution files at the time of writing is <a href=\"https://github.com/showdownjs/showdown\">showdown</a>, a markdown-to-html parser that I use for convenience when creating new blog posts.</p>\n<p>I make heavy use of templates in the HTML, each one of which is contained in a <code>&lt;script type=\"text/html\"&gt;</code> tag in the main <code>index.html</code> file. Ideally these templates would exist in their own separate files, but without the use of a transpiler I believe this to be the next best thing.</p>\n<p>The site's CSS is written using a combination of practices derived from the <a href=\"https://en.bem.info/\">Block-Element-Modifier (BEM)</a> methodology and the <a href=\"https://smacss.com/\">SMACSS</a> architecture pattern, resulting in what I believe to be (mostly) modular and (mostly) sane styles.</p>\n<p>Regarding the JavaScript, I chose to avoid using ES6 features (though I love them) because they're not fully supported at time of writing and I want to avoid using a transpiler. <a href=\"http://usejsdoc.org/\">JSDoc</a> comments are included throughout all of the JavaScript.</p>\n<h2>Design Pattern</h2>\n<p>The site is designed around the popular Model-View-Controller (MVC) design pattern, implemented from scratch in JavaScript. The <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/vanillajs\">Vanilla JavaScript TodoMVC example</a> served as a best-practices guide, though I believe I ended up straying from the ideal path in places. (There exists repetition in my views and controllers indicating design flaws on my part. I hope to eliminate these flaws when time permits, but am currently unsure of the best way to proceed.)</p>\n<p>In order to modularize my JavaScript, I use <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">Immediately-Invoked Function Expressions (IIFE)</a> in all of my client-side code. I also take care to isolate and organize my exposed code in the global namespace under the <code>window.app</code> object, which is defined by whichever of the asynchronously loaded files executes first.</p>\n<p>In place of a database, the data for the site is at time of writing stored in two JSON files which are included as resources in the HTML and accessed via XMLHttpRequests. This keeps the data separate from the rest of the application and should make the eventual transition to a proper database a smooth process.</p>\n<h2>Router</h2>\n<p>I built a <a href=\"https://github.com/Tempurturtul/junior-dev/blob/master/src/scripts/Router.js\">hash-based router</a> for Junior Dev that's capable of parsing query strings, accepting parameterized routes, and suspending operation; along with other commonly expected functionality. It utilizes the same design pattern as the rest of the site's JavaScript, meaning that the router is only exposed under the <code>window.app</code> object. I've written <a href=\"https://github.com/Tempurturtul/junior-dev/blob/master/src/scripts/Router.test.js\">thorough tests</a> for the router, and fully documented it with JSDoc style comments. It should be ready to port to other projects without issue.</p>\n<h2>Development Tools</h2>\n<p>I use <a href=\"https://nodejs.org/en/\">Node.js</a> during development, and utilize <a href=\"https://www.npmjs.com/\">npm</a> as my build tool and task runner.</p>\n<p>My <code>package.json</code> file includes scripts for the following:</p>\n<ul>\n<li>error and style checking\n\n<ul>\n<li>using <a href=\"https://github.com/eslint/eslint\">eslint</a> and <a href=\"https://github.com/stylelint/stylelint\">stylelint</a></li></ul></li>\n<li>local hosting and automatic refreshing of the project\n\n<ul>\n<li>using <a href=\"https://github.com/BrowserSync/browser-sync\">browser-sync</a></li></ul></li>\n<li>testing, optionally in a browser environment\n\n<ul>\n<li>using <a href=\"https://github.com/substack/tape\">tape</a> and <a href=\"https://github.com/tmpvar/jsdom\">jsdom</a></li></ul></li>\n<li>generation of JSON files from markdown and from other JSON files\n\n<ul>\n<li>using <a href=\"https://github.com/Tempurturtul/junior-dev/tree/master/build\">custom code</a> and <a href=\"https://github.com/showdownjs/showdown\">showdown</a></li></ul></li>\n<li>automated deployment to GitHub Pages\n\n<ul>\n<li>using <a href=\"https://github.com/tschaub/gh-pages\">gh-pages</a></li></ul></li>\n</ul>","tags":["project"]},{"title":"Hello World","subtitle":null,"created":"2016-07-19T04:00:00.000Z","modified":"2016-10-06T04:00:00.000Z","content":"<p>My name's Matt. In 2011 I graduated from a small college with a B.S. degree in Homeland Security Management. After entering the field it wasn't long before I began to feel like I'd made a mistake. I've loved working with computers since I was young, but I had always been afraid to base my career around them because I didn't want to risk corrupting my passion by making it my work.</p>\n<p>During an intellectually unfulfilling first year in my new career, I finally took a serious stab at learning to program with Zed Shaw's <a href=\"http://learnpythonthehardway.org/book/\">Learn Python the Hard Way</a>. I enjoyed the book immensely and enthusiastically began trying to apply what I'd learned. Like most fledgling programmers (I assume), I had a strong interest in creating games. I used Python in attempts to recreate simple arcade games for awhile before discovering the <a href=\"http://unity3d.com/\">Unity</a> game engine. I used Unity to learn Unity's variant of JavaScript, and then to learn C#.</p>\n<p>I learned a lot while working through numerous Unity tutorials, and also dabbled briefly in web development by taking Bob Tabor's <a href=\"https://channel9.msdn.com/Series/HTML5-CSS3-Fundamentals-Development-for-Absolute-Beginners\">HTML5 and CSS3 Fundamentals</a> course. I later took Dan Grossman's <a href=\"http://courses.cs.washington.edu/courses/cse341/13sp/\">Programming Languages</a> course, offered via the University of Washington and Coursera. During the course, Professor Grossman focused on teaching and comparing SML, Racket, and Ruby; SML and Racket being examples of statically and dynamically typed functional languages, and Ruby being an example of a dynamically typed object-oriented language. The course was perfectly challenging and introduced me to a variety of new concepts that stoked my interest in the field even further.</p>\n<p>As my love for programming grew, my satisfaction with my current career plummeted. I researched software engineering careers for awhile and settled on web development as a possible field I could switch to in the near future.</p>\n<p>I settled in and focused on learning web development. I worked through <a href=\"https://www.freecodecamp.com/\">FreeCodeCamp's</a> front-end content, then completed a <a href=\"https://www.udacity.com/course/front-end-web-developer-nanodegree--nd001\">Front-End Web Developer Nanodegree</a> program from Udacity. (See my <a href=\"#/blog/reviewing-fend\">review of the program</a> if you're interested.)</p>\n<p>In July of 2016 I applied and got accepted to <a href=\"http://www.hackreactor.com/\">Hack Reactor</a>, a coding bootcamp focusing on web development with JavaScript. It looked like my goal of switching to a career in web development was nearing completion. Unfortunately, circumstances in my personal life changed during the month between application and acceptance, and I had to decline the offer to attend.</p>\n<p>I'm now pursuing a second B.S. degree, this time in Computer Science from Oregon State University via their fully online <a href=\"http://eecs.oregonstate.edu/online-cs-students\">post-baccalaureate program</a>. I should be able to complete the program in two years, providing myself with more opportunities outside web development, and finally completing my transition to a career as a software engineer in early 2018. This is happily also around the time I'll be looking to relocate from my currently rural location.</p>\n<p>In addition to pursuing the CS degree, I'm keeping busy with <a href=\"https://github.com/Tempurturtul/learning/tree/master/haskell\">learning Haskell</a> and with personal web development projects (like Junior Dev!) intended to help me retain and grow my existing knowledge.</p>\n<p>If you'd like to contact me for any reason, I can be reached at <a href=\"mailto:tempurturtul@gmail.com\">tempurturtul@gmail.com</a>. Additional contact options are available on the <a href=\"#/contact\">contact page</a>.</p>","tags":["personal"]},{"title":"Prepping for OSU","subtitle":null,"created":"2016-08-29T04:00:00.000Z","modified":null,"content":"<p><a href=\"http://oregonstate.edu\">Oregon State University</a> offers a Bachelor of Science degree in Computer Science that is specifically tailored for individuals who already possess a Bachelor's degree in another field. It can be completed in as little as one year or as long as four years, and is fully remote (online).</p>\n<p><a href=\"http://eecs.oregonstate.edu/online-cs-students\">Have a look.</a></p>\n<p>I'm planning to enroll for the winter term starting in January 2017, but first I need to satisfy the math prerequisite of college algebra or above. Most applicants will already have this prerequisite fulfilled, but unfortunately I don't.</p>\n<p>I decided to satisfy the prereq by taking precalculus at my local community college, which thankfully offers it as an online course. I needed to take a placement test first to satisfy the prereq for <em>that</em> course, and to prep for the placement test I used the appendix from a precalculus textbook my math major partner happened to have available. I vaguely remembered most of the material from highschool, and after working through the appendix I managed to place high enough to get into the course.</p>\n<p>I should finish the course in December, and be set to attend OSU's program in January.</p>\n<p>I feel very good about this. I'll finally have a degree for the field I want to be in, and from a well-known, respectable school. The degree will also be, according to the program's <a href=\"http://eecs.oregonstate.edu/online-cs-students/future-students\">future students page</a>, identical to the one earned by on-campus students. So if I feel unsure about an employer's opinion on online degrees, I can just refrain from mentioning the online part. The degree will simply read \"B.S. in Computer Science\", so unless they specifically ask, they'll never even know.</p>","tags":["education"]},{"title":"Reviewing FEND","subtitle":"Udacity's Front-End Web Developer Nanodegree.","created":"2016-07-24T04:00:00.000Z","modified":null,"content":"<p>This review was originally posted on Reddit's /r/learnprogramming and /r/webdev subreddits. The <a href=\"https://www.reddit.com/r/learnprogramming/comments/4m1t70/udacity_nanodegree_review_frontend_web_development/\">/r/learnprogramming post</a> attracted the attention of Cameron Pittman, creator of the majority of the nanodegree's content. Have a look if you're interested in further insight into the program.</p>\n<hr />\n<p>I earned <a href=\"https://www.udacity.com/course/front-end-web-developer-nanodegree--nd001\">Udacity's Front-End Web Developer Nanodegree</a> certificate in May (2016) and thought I'd offer my thoughts on the program and share the projects I was required to complete.</p>\n<p>If you just want to see what your finished projects might look like, <a href=\"https://github.com/Tempurturtul/udacity-fend-projects\">here's a link to mine on GitHub.</a></p>\n<p><strong>Before reading on, you should be aware that I completed most of FreeCodeCamp's front-end content before enrolling in Udacity's program. This gave me a good introduction to the basics.</strong></p>\n<h2>Time &amp; Cost</h2>\n<p>The program cost <strong>$200 a month</strong> and took <strong>6 months</strong> for me to complete at a pace of maybe 15 hours a week. I was eligible to get 50% back for finishing in under a year, and got $50 off my first month so the total post-refund cost for me was <strong>$550</strong>. I believe anyone can finish in under a year if they put in consistent effort.</p>\n<p>Upon requesting the 50% refund I was notified that it takes 4-8 weeks to process. After 8 weeks I had yet to receive my refund, so I contacted support and was told that it was on the list of refunds to be paid out soon. I received my full refund the following week. Udacity didn't go out of their way to remind me of the refund when I graduated, and the only <a href=\"https://www.udacity.com/nanodegree/50-back\">link to the actual refund page</a> that I could find was buried in the FAQs section. The refund was a big motivator to finish early and obviously saved me a good amount of money, so it's definitely something to be aware of.</p>\n<h2>Difficulty</h2>\n<p>This will of course vary from person to person, but I'd say in general the program was <strong>easy to moderate</strong> in terms of difficulty. The courses that accompany each project are well done, and I don't recall doing much extra research while working on the core requirements for the projects. Note that I was moderately familiar with HTML, CSS, and JavaScript going in to the program.</p>\n<h2>Courses</h2>\n<p>The courses are <strong>great, but I believe available for free</strong>. The Nanodegree is mostly about the projects.</p>\n<h2>Projects</h2>\n<p>Each project comes with a grading rubric and feedback/code review. The main reason I signed up for the program was to get that feedback. A code reviewer (I believe they're often graduates themselves) goes through your project line-by-line and offers inline feedback where appropriate. The reviewers I got were pleasantly thorough and helpful.</p>\n<p>There's a decent degree of flexibility with most of the projects, meaning you're free to use whatever tools or technologies you like as long as you satisfy the rubric.</p>\n<p>Udacity has added projects since I graduated, but when I enrolled there were <strong>6 required projects</strong>.</p>\n<p>Here they are in order, with links to my completed versions:</p>\n<ul>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-portfolio\">Portfolio</a></p></li>\n<li><p>Basics.</p></li>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-resume\">Resume</a></p></li>\n<li><p>Content from JSON.</p></li>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-frogger\">Frogger Clone</a></p></li>\n<li><p>OOP, Canvas</p></li>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-optimization\">Optimization</a> (of an existing app)</p></li>\n<li><p>Critical rendering path, build tools</p></li>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-neighborhood-map\">Neighborhood Map</a></p></li>\n<li><p>Knockout.js framework, APIs</p></li>\n<li><p><a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-feed-reader\">Testing</a> (of an existing app)</p></li>\n<li><p>Jasmine</p></li>\n<li><p><em>Bonus:</em> <a href=\"https://github.com/Tempurturtul/udacity-fend-projects/tree/master/fend-design-patterns/cat-clicker-v2\">Cat Clicker</a></p></li>\n<li><p>MV* design patterns exercise, not graded or reviewed.</p></li>\n</ul>\n<p>When I enrolled there were two passing grades: Meets Specs and Exceeds Specs, but they've since moved to a simple <strong>pass/fail grading system</strong>. Extra credit sort of things are still listed in their own section of the rubric in case you feel like doing them.</p>\n<p>I enjoyed the projects and found all but the last one (testing an existing project) to be <strong>pleasantly challenging</strong>. You judge, but I think they'll be helpful while job hunting.</p>\n<h2>1-on-1 Coaching</h2>\n<p>Coaching is available for (I believe) all projects. I only took advantage of this once. It was a simple instant messaging conversation that easily lasted the scheduled 30 minutes and was acceptably, but not exceptionally, helpful. It did feel a little shallow; I don't think the coach spent more than a few minutes looking through my code prior to the appointment. I may have had a better experience if I went in with a specific problem to solve, but in my case I was just asking for overall impressions which is what I got.</p>\n<h2>Career Development Stuff</h2>\n<p>The program includes a good amount of career development courses (which I assume are free) and projects, plus a sort of exit interview with a career coach.</p>\n<p>The career projects were graded and reviewed in the same way as the other projects, with the exception that they're optional.</p>\n<p>The ones I completed were:</p>\n<ul>\n<li><p>Resume</p></li>\n<li><p>Cover Letter</p></li>\n<li><p>GitHub Profile Review</p></li>\n<li><p>LinkedIn Profile Review</p></li>\n</ul>\n<p>These were basically just reviews of existing things for me. There's also a Job Interview project that I'm interested in doing at some point.</p>\n<p>About the exit interview:</p>\n<p>For me it was a video call with a coach who asked for program feedback and questioned me a little about my goals. There was some miscommunication about where to go to establish the video call, but thankfully I was watching my email when he got in touch with the correct link.</p>\n<p>The coach I got was actually a programming coach who apologized and told me that all of the career coaches were busy. He was nice and provided some helpful links, but looking back I would have preferred being rescheduled with a career coach.</p>\n<h2>Community</h2>\n<p>I interacted with my peers exclusively through the program's Slack channel, which was decently active and included a lot of participation from some Udacity employees responsible for the Nanodegree program itself. I had a lot of opportunities to help other students and get additional feedback on my projects. The community was very friendly.</p>\n<p>I'm not a fan of traditional forums, but they exist if you prefer them. I don't how active they are though.</p>\n<h2>Would I Do It Again?</h2>\n<p>Yes.</p>\n<p>I was switching careers from a non-technical field and I needed the motivation (finishing faster = less money spent) and direction (I get sidetracked or bite off more than I can chew), plus the projects and code reviews were helpful in building confidence and demonstrable experience.</p>\n<p>If you don't need motivation, direction, or additional confidence: I recommend free resources instead.</p>","tags":["review","education"]}]